/*
 * Copyright (C) 2015 Zhang Rui <bbcallen@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * https://github.com/Bilibili/jni4android
 * This file is automatically generated by jni4android, do not modify.
 */

#ifndef J4A__com_media_gankers_medianative_CameraWrapper__H
#define J4A__com_media_gankers_medianative_CameraWrapper__H

#include <sys/cdefs.h>

__BEGIN_DECLS
#include "j4a/j4a_base.h"

jobject J4AC_com_media_gankers_medianative_CameraWrapper__CameraWrapper(JNIEnv *env, jlong nativeHandle);
jobject J4AC_com_media_gankers_medianative_CameraWrapper__CameraWrapper__catchAll(JNIEnv *env, jlong nativeHandle);
jobject J4AC_com_media_gankers_medianative_CameraWrapper__CameraWrapper__asGlobalRef__catchAll(JNIEnv *env, jlong nativeHandle);
jstring J4AC_com_media_gankers_medianative_CameraWrapper__getExceptionMessage(JNIEnv *env, jobject thiz);
jstring J4AC_com_media_gankers_medianative_CameraWrapper__getExceptionMessage__catchAll(JNIEnv *env, jobject thiz);
jstring J4AC_com_media_gankers_medianative_CameraWrapper__getExceptionMessage__asGlobalRef__catchAll(JNIEnv *env, jobject thiz);
const char *J4AC_com_media_gankers_medianative_CameraWrapper__getExceptionMessage__asCBuffer(JNIEnv *env, jobject thiz, char *out_buf, int out_len);
const char *J4AC_com_media_gankers_medianative_CameraWrapper__getExceptionMessage__asCBuffer__catchAll(JNIEnv *env, jobject thiz, char *out_buf, int out_len);
jboolean J4AC_com_media_gankers_medianative_CameraWrapper__open(JNIEnv *env, jobject thiz, jint idx);
jboolean J4AC_com_media_gankers_medianative_CameraWrapper__open__catchAll(JNIEnv *env, jobject thiz, jint idx);
jint J4AC_com_media_gankers_medianative_CameraWrapper__getNumOfCamera(JNIEnv *env);
jint J4AC_com_media_gankers_medianative_CameraWrapper__getNumOfCamera__catchAll(JNIEnv *env);
jint J4AC_com_media_gankers_medianative_CameraWrapper__getFrontCameraIdx(JNIEnv *env);
jint J4AC_com_media_gankers_medianative_CameraWrapper__getFrontCameraIdx__catchAll(JNIEnv *env);
jint J4AC_com_media_gankers_medianative_CameraWrapper__getBackCameraIdx(JNIEnv *env);
jint J4AC_com_media_gankers_medianative_CameraWrapper__getBackCameraIdx__catchAll(JNIEnv *env);
jlong J4AC_com_media_gankers_medianative_CameraWrapper__updateImage(JNIEnv *env, jobject thiz);
jlong J4AC_com_media_gankers_medianative_CameraWrapper__updateImage__catchAll(JNIEnv *env, jobject thiz);
jboolean J4AC_com_media_gankers_medianative_CameraWrapper__startPreview(JNIEnv *env, jobject thiz, jint tex);
jboolean J4AC_com_media_gankers_medianative_CameraWrapper__startPreview__catchAll(JNIEnv *env, jobject thiz, jint tex);
void J4AC_com_media_gankers_medianative_CameraWrapper__release(JNIEnv *env, jobject thiz);
void J4AC_com_media_gankers_medianative_CameraWrapper__release__catchAll(JNIEnv *env, jobject thiz);
int J4A_loadClass__J4AC_com_media_gankers_medianative_CameraWrapper(JNIEnv *env);

__END_DECLS
#endif//J4A__com_media_gankers_medianative_CameraWrapper__H
